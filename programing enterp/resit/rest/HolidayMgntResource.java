package rest;

import java.lang.invoke.MethodHandles;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.inject.Inject;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.MapMessage;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import dao.IEmployee;
import dao.IHoliday;
import dao.ILogin;
import model.Department;
import model.Employee;
import model.Holiday;
import model.Role;
import pojo.EmployeePojo;
import pojo.HolidayPojo;
import pojo.Login;

@Path("employee")
public class HolidayMgntResource {

	private static final Logger logger = Logger.getLogger(MethodHandles.lookup().lookupClass().getName());

	@Inject
	private IHoliday iHoliday;

	@Inject
	private IEmployee iEmployee;
	
	@Inject
	private ILogin iLogin;
	
	@GET
	@Produces({ MediaType.APPLICATION_JSON })
	public List<Holiday> getAllHolidays() {
		return this.iHoliday.getAllHolidays();
	}
	
	@POST
	@Path("login")
	@Consumes({ MediaType.APPLICATION_JSON })
	public String login(Login login) throws ParseException {
		Employee employee = new Employee();
		
		employee.setEmail(login.getUserName());
		employee.setPassword(login.getPass());
		employee = iLogin.authenticate(employee);
		if(employee!= null) {
			return "{'status' : 'SUCCESS'}";
		}else {
			return "{'status' : 'FAILED'}";
		}
		
	}

	

	@POST
	@Path("generateLeave")
	@Consumes({ MediaType.APPLICATION_JSON })
	public String addHoliday(HolidayPojo holidayPojo) throws ParseException {
		Holiday newholiday = new Holiday();
        
        newholiday.setReason(holidayPojo.getReason());
        newholiday.setStatus("RAISED");
        newholiday.setRequestdate(new Date());
        String fromDate = holidayPojo.getFromDate();
        String toDate = holidayPojo.getToDate();
        
        Date date1 = new SimpleDateFormat("MM/dd/yyyy").parse(fromDate);  
        Date date2 = new SimpleDateFormat("MM/dd/yyyy").parse(toDate);  
        long difference = date2.getTime() - date1.getTime();
	    float daysBetween = (difference / (1000*60*60*24));
        Employee hod = new Employee();
        hod.setId(holidayPojo.getAssignTo());
        newholiday.setHod(hod);
//        Employee emp = iEmployee.getEmployee(holidayPojo.getEmployeeId());
//        
//        List<Holiday> holidays = new ArrayList<Holiday>();
//        if(daysBetween > 0){
//        	
//        	for(int i=0 ; i<daysBetween; i++) {
//        		Holiday holiday = new Holiday();
//        		holiday.setHod(newholiday.getHod());
//        		holiday.setReason(newholiday.getReason());
//        		holiday.setRequestdate(newholiday.getRequestdate());
//        		holiday.setStatus(newholiday.getStatus());
//        		holiday.setEmployee(emp);
//            	holidays.add(holiday);
//            	Date dt = date1;
//                Calendar c = Calendar.getInstance();
//                c.setTime(dt);
//                c.add(Calendar.DATE, 1);
//                dt = c.getTime();
//                date1 = dt;
//        	}
//        }
//  
//        	//iHoliday.saveHoliday(holidays);
        	
        	// Send message in JMS queue which will send mail to HOD.
//        	try {
//    			Context jndiContext = new InitialContext();
//    			ConnectionFactory factory = (ConnectionFactory) jndiContext.lookup("java:/ConnectionFactory");
//    			Queue calculationQueue = (Queue) jndiContext.lookup("java:/jms/queue/HolidayRequestQueue");
//    			Connection connect = factory.createConnection();
//
//    			Session session = connect.createSession(false, Session.AUTO_ACKNOWLEDGE);
//
//    			MessageProducer sender = session.createProducer(calculationQueue);
//    				
//    				MapMessage message = session.createMapMessage();
//    				message.setString("title", "Leave Generated.");
//    				message.setString("body", "New Leave Application Generated By "+emp.getFirstname()+" "+emp.getLastname());
//    				System.out.println("New Leave Application Generated By "+emp.getFirstname()+" "+emp.getLastname());
//    				sender.send(message);
//    				connect.close();
//  
//    			
//    		} catch (NamingException e) {
//    			e.printStackTrace();
//    			return "{'status' : 'ERROR'"
//    					+ ",'message' : '"+e.getMessage()+"'}";
//    		} catch (JMSException e) {
//    			e.printStackTrace();
//    			return "{'status' : 'ERROR'"
//				+ ",'message' : '"+e.getMessage()+"'}";
//    		}
//    		catch (Exception e) {
//    			e.printStackTrace();
//    			return "{'status' : 'ERROR'"
//				+ ",'message' : '"+e.getMessage()+"'}";
//    		}
        	return "{'status' : 'SUCCESS'}";
	}

	@GET
	@Path("{id}")
	@Produces({ MediaType.APPLICATION_JSON })
	public Holiday getHolidayById(@PathParam("id") int holidayId) {
		return this.iHoliday.getHolidayById(holidayId);
		
	}

	@Post
	@Path("createEmployee")
	@Consumes({ MediaType.APPLICATION_JSON })
	public String creatNewEmployee(EmployeePojo employeePojo) throws ParseException {
		
		Employee employee = new Employee();

    	employee.setPassword(employeePojo.getPassword());	
    	employee.setEmail(employeePojo.getEmail());	
    	employee.setDepartment(employeePojo.getDepartmentId());
    	employee.setRole(employeePojo.getRoleId());
    	employee.setEmployeetype(employeePojo.getEmpType());
    	employee.setFirstname(employeePojo.getFirstName());
    	employee.setLastname(employeePojo.getLastName());
    	employee.setHolidaybal(employeePojo.getHolidatybal());
    	employee.setFirstname(employeePojo.);
       
		
		
        Employee emp = employee.addEmployee(employee);
//        
//        List<Holiday> holidays = new ArrayList<Holiday>();
//        if(daysBetween > 0){
//        	
//        	for(int i=0 ; i<daysBetween; i++) {
//        		Holiday holiday = new Holiday();
//        		holiday.setHod(newholiday.getHod());
//        		holiday.setReason(newholiday.getReason());
//        		holiday.setRequestdate(newholiday.getRequestdate());
//        		holiday.setStatus(newholiday.getStatus());
//        		holiday.setEmployee(emp);
//            	holidays.add(holiday);
//            	Date dt = date1;
//                Calendar c = Calendar.getInstance();
//                c.setTime(dt);
//                c.add(Calendar.DATE, 1);
//                dt = c.getTime();
//                date1 = dt;
//        	}
//        }
}